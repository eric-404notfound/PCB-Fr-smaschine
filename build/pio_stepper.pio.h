// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// stepper_x //
// --------- //

#define stepper_x_wrap_target 0
#define stepper_x_wrap 14
#define stepper_x_pio_version 0

static const uint16_t stepper_x_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x6001, //  1: out    pins, 1                    
    0x604f, //  2: out    y, 15                      
    0x6030, //  3: out    x, 16                      
    0xa0c1, //  4: mov    isr, x                     
    0xc002, //  5: irq    nowait 2                   
    0x20c1, //  6: wait   1 irq, 1                   
    0x0060, //  7: jmp    !y, 0                      
    0xa026, //  8: mov    x, isr                     
    0xbf42, //  9: nop                    side 1 [7] 
    0x0149, // 10: jmp    x--, 9                 [1] 
    0xa026, // 11: mov    x, isr                     
    0xb742, // 12: nop                    side 0 [7] 
    0x014c, // 13: jmp    x--, 12                [1] 
    0x0087, // 14: jmp    y--, 7                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program stepper_x_program = {
    .instructions = stepper_x_program_instructions,
    .length = 15,
    .origin = -1,
    .pio_version = stepper_x_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config stepper_x_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + stepper_x_wrap_target, offset + stepper_x_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}
#endif

// --------- //
// stepper_y //
// --------- //

#define stepper_y_wrap_target 0
#define stepper_y_wrap 14
#define stepper_y_pio_version 0

static const uint16_t stepper_y_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x6001, //  1: out    pins, 1                    
    0x604f, //  2: out    y, 15                      
    0x6030, //  3: out    x, 16                      
    0xa0c1, //  4: mov    isr, x                     
    0xc001, //  5: irq    nowait 1                   
    0x20c2, //  6: wait   1 irq, 2                   
    0x0060, //  7: jmp    !y, 0                      
    0xa026, //  8: mov    x, isr                     
    0xbf42, //  9: nop                    side 1 [7] 
    0x0149, // 10: jmp    x--, 9                 [1] 
    0xa026, // 11: mov    x, isr                     
    0xb742, // 12: nop                    side 0 [7] 
    0x014c, // 13: jmp    x--, 12                [1] 
    0x0087, // 14: jmp    y--, 7                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program stepper_y_program = {
    .instructions = stepper_y_program_instructions,
    .length = 15,
    .origin = -1,
    .pio_version = stepper_y_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config stepper_y_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + stepper_y_wrap_target, offset + stepper_y_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}
#endif

// --------- //
// stepper_z //
// --------- //

#define stepper_z_wrap_target 0
#define stepper_z_wrap 12
#define stepper_z_pio_version 0

static const uint16_t stepper_z_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x6001, //  1: out    pins, 1                    
    0x604f, //  2: out    y, 15                      
    0x6030, //  3: out    x, 16                      
    0xa0c1, //  4: mov    isr, x                     
    0x0060, //  5: jmp    !y, 0                      
    0xa026, //  6: mov    x, isr                     
    0xbf42, //  7: nop                    side 1 [7] 
    0x0147, //  8: jmp    x--, 7                 [1] 
    0xa026, //  9: mov    x, isr                     
    0xb742, // 10: nop                    side 0 [7] 
    0x014a, // 11: jmp    x--, 10                [1] 
    0x0085, // 12: jmp    y--, 5                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program stepper_z_program = {
    .instructions = stepper_z_program_instructions,
    .length = 13,
    .origin = -1,
    .pio_version = stepper_z_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config stepper_z_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + stepper_z_wrap_target, offset + stepper_z_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void stepper_x_program_init(PIO pio, uint sm, uint offset, uint step_pin, uint dir_pin, uint MICROSTEPS) {
    pio_sm_config c = stepper_x_program_get_default_config(offset);
    // Konfiguriere die Direction-Pins
    pio_gpio_init(pio, dir_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, dir_pin, 1, true);
    pio_sm_set_out_pins(pio, sm, dir_pin, 1);
    sm_config_set_out_pins(&c, dir_pin, 1);
    // Konfiguriere die Side-Set-Pins (für step)
    pio_gpio_init(pio, step_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, step_pin, 1, true);
    pio_sm_set_sideset_pins(pio, sm, step_pin);
    sm_config_set_sideset_pins(&c, step_pin);
    // Konfiguriere die FIFO
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    //Initialisiere die State Machine
    pio_sm_init(pio, sm, offset, &c);
    // Setze den Clock-Divider für 100 ms pro Takt (10 Hz)
    pio_sm_set_clkdiv(pio, sm, 125 / (2 *MICROSTEPS)); // clkdiv = 1,250,000 ->>>>>>>>>>>
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
static inline void stepper_y_program_init(PIO pio, uint sm, uint offset, uint step_pin, uint dir_pin, uint MICROSTEPS) {
    pio_sm_config c = stepper_y_program_get_default_config(offset);
    // Konfiguriere die Direction-Pins
    pio_gpio_init(pio, dir_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, dir_pin, 1, true);
    pio_sm_set_out_pins(pio, sm, dir_pin, 1);
    sm_config_set_out_pins(&c, dir_pin, 1);
    // Konfiguriere die Side-Set-Pins (für step)
    pio_gpio_init(pio, step_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, step_pin, 1, true);
    pio_sm_set_sideset_pins(pio, sm, step_pin);
    sm_config_set_sideset_pins(&c, step_pin);
    // Konfiguriere die FIFO
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    //Initialisiere die State Machine
    pio_sm_init(pio, sm, offset, &c);
    // Setze den Clock-Divider für 100 ms pro Takt (10 Hz)
    pio_sm_set_clkdiv(pio, sm, 125 / (2 *MICROSTEPS)); // clkdiv = 1,250,000
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
static inline void stepper_z_program_init(PIO pio, uint sm, uint offset, uint step_pin, uint dir_pin, uint MICROSTEPS) {
    pio_sm_config c = stepper_z_program_get_default_config(offset);
    // Konfiguriere die Direction-Pins
    pio_gpio_init(pio, dir_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, dir_pin, 1, true);
    pio_sm_set_out_pins(pio, sm, dir_pin, 1);
    sm_config_set_out_pins(&c, dir_pin, 1);
    // Konfiguriere die Side-Set-Pins (für step)
    pio_gpio_init(pio, step_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, step_pin, 1, true);
    pio_sm_set_sideset_pins(pio, sm, step_pin);
    sm_config_set_sideset_pins(&c, step_pin);
    // Konfiguriere die FIFO
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    //Initialisiere die State Machine
    pio_sm_init(pio, sm, offset, &c);
    // Setze den Clock-Divider für 100 ms pro Takt (10 Hz)
    pio_sm_set_clkdiv(pio, sm, 125 / (2 *MICROSTEPS)); // clkdiv = 1,250,000
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

